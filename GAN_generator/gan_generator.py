import os
import glob
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from music21 import converter, instrument, note, chord, stream
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import Bidirectional
from tensorflow.keras.layers import Input, Dense, Reshape, LSTM, LeakyReLU
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import Adam
from tensorflow.python.keras.layers import RepeatVector, MaxPooling1D, Flatten, Conv1D
from tensorflow.python.keras.utils import np_utils

gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

def writeTxt(relate_record, src):
    with open(src, 'w', newline='\n', encoding='utf-8') as file:
        for i in relate_record:
            file.write(i)
            file.write('\n')
        file.close()


def get_notes(paths):

    notes = []

    for file in  glob.glob('composers/Alkan/*.mid'):
        midi = converter.parse(file)

        print("Parsing %s" % file)
        try:  # file has instrument parts
            s2 = instrument.partitionByInstrument(midi)
            notes_to_parse = s2.parts[0].recurse()
        except:  # file has notes in a flat structure
            notes_to_parse = midi.flat.notes

        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))

    return notes


sequence_length = 500


def prepare_sequences(notes, n_vocab):

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))

    # Create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    network_input = []
    network_output = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        network_output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # Reshape the input into a format compatible with LSTM layers
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))

    # Normalize input between -1 and 1
    network_input = (network_input - float(n_vocab) / 2) / (float(n_vocab) / 2)
    network_output = np_utils.to_categorical(network_output)

    return (network_input, network_output)


def create_midi(prediction_output, filename):

    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for item in prediction_output:
        pattern = item[0]
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='{}.mid'.format(filename))


class GAN():
    def __init__(self, rows, paths, name):
        self.seq_length = rows
        self.name = name
        self.seq_shape = (self.seq_length, 1)
        self.latent_dim = 1000
        self.disc_loss = []
        self.gen_loss = []
        self.paths = paths

        optimizer = Adam(0.0001, 0.8)

        # Build and compile the discriminator
        self.discriminator = self.build_discriminator()
        self.discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        # Build the generator
        self.generator = self.build_generator()

        # The generator takes noise as input and generates note sequences
        z = Input(shape=(self.latent_dim,))
        generated_seq = self.generator(z)

        # For the combined model we will only train the generator
        self.discriminator.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.discriminator(generated_seq)

        # The combined model  (stacked generator and discriminator)
        # Trains the generator to fool the discriminator
        self.combined = Model(z, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

    def build_discriminator(self):

        model = Sequential()

        # model.add(LSTM(512, input_shape=self.seq_shape, return_sequences=True))
        # model.add(Bidirectional(LSTM(512)))
        # model.add(Dense(512))
        # model.add(LeakyReLU(alpha=0.2))
        # model.add(Dense(256))
        # model.add(LeakyReLU(alpha=0.2))
        # model.add(Dense(1, activation='sigmoid'))

        # 模型一
        model.add(LSTM(1, activation='relu', input_shape=self.seq_shape, return_sequences=False))
        model.add(RepeatVector(1))
        model.add(LSTM(1, activation='relu', return_sequences=True))
        # 模型二
        model.add(Bidirectional(LSTM(3, activation='relu', return_sequences=True)))
        # 模型三
        model.add(LSTM(3, activation='tanh', return_sequences=True))
        model.add(LSTM(3, activation='tanh', dropout=0.2, recurrent_dropout=0.2, return_sequences=True))
        model.add(LSTM(3, activation='tanh', dropout=0.2, recurrent_dropout=0.2, return_sequences=True))
        # 模型四
        model.add(Conv1D(filters=16, kernel_size=1, activation='relu'))
        model.add(Conv1D(filters=16, kernel_size=1, activation='relu'))
        model.add(MaxPooling1D(pool_size=1))
        model.add(Flatten())
        model.add(RepeatVector(1))
        model.add(LSTM(10, activation='relu', return_sequences=False))
        model.add(Dense(1, activation='sigmoid'))
        model.summary()

        seq = Input(shape=self.seq_shape)
        validity = model(seq)

        return Model(seq, validity)

    def build_generator(self):
        # bgan
        model = Sequential()
        model.add(Dense(16, input_dim=self.latent_dim))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(32))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(64))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(np.prod(self.seq_shape), activation='tanh'))
        model.add(Reshape(self.seq_shape))
        # model.summary()

        noise = Input(shape=(self.latent_dim,))
        seq = model(noise)

        return Model(noise, seq)

    def train(self, epochs, batch_size=64, name=''):

        # Load and convert the data
        notes = get_notes(self.paths)
        n_vocab = len(set(notes))
        X_train, y_train = \
            prepare_sequences(notes, n_vocab)

        # Adversarial ground truths
        real = np.ones((batch_size, 1))
        fake = np.zeros((batch_size, 1))

        # Training the model
        for epoch in range(epochs):

            # Training the discriminator
            # Select a random batch of note sequences
            idx = np.random.randint(0, X_train.shape[0], batch_size)
            real_seqs = X_train[idx]

            # noise = np.random.choice(range(484), (batch_size, self.latent_dim))
            # noise = (noise-242)/242
            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

            # Generate a batch of new note sequences
            gen_seqs = self.generator.predict(noise)

            # Train the discriminator
            d_loss_real = self.discriminator.train_on_batch(real_seqs, real)
            d_loss_fake = self.discriminator.train_on_batch(gen_seqs, fake)
            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

            #  Training the Generator
            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

            # Train the generator (to have the discriminator label samples as real)
            g_loss = self.combined.train_on_batch(noise, real)

            self.disc_loss.append(d_loss[0])
            self.gen_loss.append(g_loss)
            if epoch % 50 == 0:
                self.generator.save('Model/g_{}_%d.h5'.format(name) % epoch)
                self.discriminator.save('Model/d_{}_%d.h5'.format(name) % epoch)
            self.generate(notes, epoch)
            self.plot_loss(epoch)

    def generate(self, input_notes, epoch):
        # 获取音调名称并存储在字典中
        notes = input_notes
        pitchnames = sorted(set(item for item in notes))
        int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
        # 使用随机噪声生成序列
        noise = np.random.normal(0, 1, (1, self.latent_dim))
        predictions = self.generator.predict(noise)
        from sklearn.preprocessing import MinMaxScaler

        scaler = MinMaxScaler()
        a = scaler.fit_transform(predictions[0])
        pred_notes = [x * 23 for x in a]
        pred_notes = [int_to_note[int(x)] for x in pred_notes]
        if not os.path.exists('./song/small/'):
            os.mkdir('./song/small/')
        create_midi(pred_notes, r'./song/small/{}_%d'.format('name') % epoch)

    def plot_loss(self, epoch):
        plt.plot(self.disc_loss, c='red')
        plt.plot(self.gen_loss, c='blue')
        plt.title("GAN Loss per Epoch")
        plt.legend(['Discriminator', 'Generator'])
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.savefig('Result/{}_%d.png'.format(self.name) % epoch, transparent=True)
        plt.show()
        plt.close()


if __name__ == '__main__':

    p = []
    with open('song/c.txt')  as f:
        for item in f.readlines():
            p.append(item.replace("\n", ""))
            print(item)
    gan = GAN(rows=sequence_length, paths=p, name='name')
    gan.train(epochs=200, batch_size=64, name='name')
